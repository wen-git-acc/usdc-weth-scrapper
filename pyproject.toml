[tool.poetry]
name = "app"
version = "0.0.1"
description = "usdc-weth-scrapper"
authors = ["fangwen.liang <fangwen97@gmail.com>"]
readme = "README.md"
package-mode = false

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.dependencies]
fastapi = { extras = ["all"], version = "*" }
python = "^3.11"
gunicorn = "*"
pydantic = { extras = ["dotenv"], version = "*" }
python-dotenv = "*"
python-json-logger = "*"
typer = "*"
pydantic-settings = "*"
langchain = "^0.2.0"
langserve = "^0.2.0"
langsmith = "^0.1.62"
langchain_openai = "0.1.7"
langchain-community = "^0.2.1"
langchainhub = "^0.1.17"
sse-starlette = "^2.0.0"
httpx-sse = "^0.4.0"
opentelemetry-distro = "^0.45b0"
opentelemetry-exporter-otlp = "^1.24.0"
opentelemetry-instrumentation-fastapi = "^0.45b0"
authlib = "^1.3.0"
datadog = "^0.49.1"
psycopg2 = "^2.9.9"
pgvector = "^0.2.5"

pytz = "^2024.1"
pandas = "^2.2.2"
redis = "^5.0.6"
[tool.poetry.group.dev.dependencies]
mypy = "*"
pre-commit = "*"
pytest = "*"
pytest-cov = "*"
ruff = "*"
uvicorn = "*"

[tool.isort]
# compatible with psf/black
# https://pycqa.github.io/isort/docs/configuration/black_compatibility/
# https://github.com/psf/black/blob/master/docs/compatible_configs.md
profile = "black"
float_to_top = true
src_paths = [".", "app", "tests"]

[tool.pytest.ini_options]
addopts = ["-ra", "-v", "--strict-markers", "--import-mode=importlib", "--cov"]
minversion = "6.0"

[tool.ruff]
fix = true
src = [".", "app", "tests"]
extend-include = ["*.ipynb"]
lint.select = ["ALL"]
lint.ignore = [
    "D",      # pydocstyle
    "E501",   # line-too-long
    "COM812", # missing-trailing-comma # conflicts with ruff formatter
    "ISC001", # single-line-implicit-string-concatenation # conflicts with ruff formatter
    "TCH002", # Move third-party import `xxx` into a type-checking block
    "E902",   # future-import boilerplate
    "FA",     # Ignored all FAxxx erros. Missing `from __future__ import annotations`. No longer needed in Python 3.10
    "UP007",  # Use X | Y for type annotations
    "ANN101", # Missing type annotation for `self` in method
    "B008",   # Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    "TRY002", #Create your own exception,
    "TRY301", #Abstract raise to inner function, redundant.
    "RUF012", #Mutable class attributes should be annotated with `typing.ClassVar`
    "T201", #print statement
    "ERA001", #Found commented-out code
]

[tool.ruff.lint.pydocstyle]
convention = "pep257"

[tool.ruff.lint.per-file-ignores]
"**/tests/**" = [
    "S101", # Use of assert detected. The enclosed code will be skipped during linting.
    "INP001", # Ignored all INPxxx erros. Missing `__init__.py` file
    "ANN201" # Missing type annotation for `self` in method
]
